#include "jop_common.fx"

texture lastshader;
texture depthframe;

sampler s0 = sampler_state { texture = <lastshader>; magfilter = point; minfilter = point; };
sampler sDepthFrame = sampler_state { texture=<depthframe>; addressu = clamp; addressv = clamp; magfilter = point; minfilter = point; };

extern float radius = 12;

struct Region
{
    float3 mean;
    float variance;
};

#define KERNEL_RADIUS 12
static const float kernel[KERNEL_RADIUS * 2 + 1][KERNEL_RADIUS * 2 + 1] = {
    {0.00082372, 0.0008922,  0.00095969, 0.00102514, 0.00108747, 0.00114561, 0.00119851, 0.00124517, 0.00128469, 0.0013163,  0.00133935, 0.00135338, 0.00135808, 0.00135338, 0.00133935, 0.0013163,  0.00128469, 0.00124517, 0.00119851, 0.00114561, 0.00108747, 0.00102514, 0.00095969, 0.0008922, 0.00082372 },
    {0.0008922,  0.00096638, 0.00103947, 0.00111036, 0.00117788, 0.00124085, 0.00129815, 0.00134869, 0.0013915,  0.00142573, 0.0014507,  0.00146589, 0.00147099, 0.00146589, 0.0014507,  0.00142573, 0.0013915,  0.00134869, 0.00129815, 0.00124085, 0.00117788, 0.00111036, 0.00103947, 0.00096638, 0.0008922 },
    {0.00095969, 0.00103947, 0.0011181,  0.00119435, 0.00126697, 0.00133471, 0.00139634, 0.0014507,  0.00149675, 0.00153358, 0.00156043, 0.00157677, 0.00158226, 0.00157677, 0.00156043, 0.00153358, 0.00149675, 0.0014507, 0.00139634, 0.00133471, 0.00126697, 0.00119435, 0.0011181,  0.00103947, 0.00095969 },
    {0.00102514, 0.00111036, 0.00119435, 0.0012758,  0.00135338, 0.00142573, 0.00149156, 0.00154964, 0.00159883, 0.00163816, 0.00166685, 0.0016843, 0.00169016, 0.0016843,  0.00166685, 0.00163816, 0.00159883, 0.00154964, 0.00149156, 0.00142573, 0.00135338, 0.0012758,  0.00119435, 0.00111036, 0.00102514 },
    {0.00108747, 0.00117788, 0.00126697, 0.00135338, 0.00143567, 0.00151242, 0.00158226, 0.00164386, 0.00169604, 0.00173777, 0.0017682,  0.00178672, 0.00179293, 0.00178672, 0.0017682,  0.00173777, 0.00169604, 0.00164386, 0.00158226, 0.00151242, 0.00143567, 0.00135338, 0.00126697, 0.00117788, 0.00108747 },
    {0.00114561, 0.00124085, 0.00133471, 0.00142573, 0.00151242, 0.00159328, 0.00166685, 0.00173175, 0.00178672, 0.00183068, 0.00186274, 0.00188224, 0.00188879, 0.00188224, 0.00186274, 0.00183068, 0.00178672, 0.00173175, 0.00166685, 0.00159328, 0.00151242, 0.00142573, 0.00133471, 0.00124085, 0.00114561 },
    {0.00119851, 0.00129815, 0.00139634, 0.00149156, 0.00158226, 0.00166685, 0.00174381, 0.00181171, 0.00186922, 0.00191521, 0.00194875, 0.00196915, 0.001976,   0.00196915, 0.00194875, 0.00191521, 0.00186922, 0.00181171, 0.00174381, 0.00166685, 0.00158226, 0.00149156, 0.00139634, 0.00129815, 0.00119851 },
    {0.00124517, 0.00134869, 0.0014507,  0.00154964, 0.00164386, 0.00173175, 0.00181171, 0.00188224, 0.00194199, 0.00198977, 0.00202462, 0.00204582, 0.00205293, 0.00204582, 0.00202462, 0.00198977, 0.00194199, 0.00188224, 0.00181171, 0.00173175, 0.00164386, 0.00154964, 0.0014507,  0.00134869, 0.00124517 },
    {0.00128469, 0.0013915,  0.00149675, 0.00159883, 0.00169604, 0.00178672, 0.00186922, 0.00194199, 0.00200364, 0.00205293, 0.00208889, 0.00211076, 0.0021181,  0.00211076, 0.00208889, 0.00205293, 0.00200364, 0.00194199, 0.00186922, 0.00178672, 0.00169604, 0.00159883, 0.00149675, 0.0013915, 0.00128469 },
    {0.0013163,  0.00142573, 0.00153358, 0.00163816, 0.00173777, 0.00183068, 0.00191521, 0.00198977, 0.00205293, 0.00210344, 0.00214028, 0.00216269, 0.00217021, 0.00216269, 0.00214028, 0.00210344, 0.00205293, 0.00198977, 0.00191521, 0.00183068, 0.00173777, 0.00163816, 0.00153358, 0.00142573, 0.0013163 },
    {0.00133935, 0.0014507,  0.00156043, 0.00166685, 0.0017682,  0.00186274, 0.00194875, 0.00202462, 0.00208889, 0.00214028, 0.00217776, 0.00220056, 0.00220822, 0.00220056, 0.00217776, 0.00214028, 0.00208889, 0.00202462, 0.00194875, 0.00186274, 0.0017682,  0.00166685, 0.00156043, 0.0014507, 0.00133935 },
    {0.00135338, 0.00146589, 0.00157677, 0.0016843,  0.00178672, 0.00188224, 0.00196915, 0.00204582, 0.00211076, 0.00216269, 0.00220056, 0.00222361, 0.00223134, 0.00222361, 0.00220056, 0.00216269, 0.00211076, 0.00204582, 0.00196915, 0.00188224, 0.00178672, 0.0016843,  0.00157677, 0.00146589, 0.00135338 },
    {0.00135808, 0.00147099, 0.00158226, 0.00169016, 0.00179293, 0.00188879, 0.001976,   0.00205293, 0.0021181,  0.00217021, 0.00220822, 0.00223134, 0.0022391,  0.00223134, 0.00220822, 0.00217021, 0.0021181,  0.00205293, 0.001976,   0.00188879, 0.00179293, 0.00169016, 0.00158226, 0.00147099, 0.00135808 },
    {0.00135338, 0.00146589, 0.00157677, 0.0016843,  0.00178672, 0.00188224, 0.00196915, 0.00204582, 0.00211076, 0.00216269, 0.00220056, 0.00222361, 0.00223134, 0.00222361, 0.00220056, 0.00216269, 0.00211076, 0.00204582, 0.00196915, 0.00188224, 0.00178672, 0.0016843,  0.00157677, 0.00146589, 0.00135338 },
    {0.00133935, 0.0014507,  0.00156043, 0.00166685, 0.0017682,  0.00186274, 0.00194875, 0.00202462, 0.00208889, 0.00214028, 0.00217776, 0.00220056, 0.00220822, 0.00220056, 0.00217776, 0.00214028, 0.00208889, 0.00202462, 0.00194875, 0.00186274, 0.0017682,  0.00166685, 0.00156043, 0.0014507, 0.00133935 },
    {0.0013163,  0.00142573, 0.00153358, 0.00163816, 0.00173777, 0.00183068, 0.00191521, 0.00198977, 0.00205293, 0.00210344, 0.00214028, 0.00216269, 0.00217021, 0.00216269, 0.00214028, 0.00210344, 0.00205293, 0.00198977, 0.00191521, 0.00183068, 0.00173777, 0.00163816, 0.00153358, 0.00142573, 0.0013163 },
    {0.00128469, 0.0013915,  0.00149675, 0.00159883, 0.00169604, 0.00178672, 0.00186922, 0.00194199, 0.00200364, 0.00205293, 0.00208889, 0.00211076, 0.0021181,  0.00211076, 0.00208889, 0.00205293, 0.00200364, 0.00194199, 0.00186922, 0.00178672, 0.00169604, 0.00159883, 0.00149675, 0.0013915, 0.00128469 },
    {0.00124517, 0.00134869, 0.0014507,  0.00154964, 0.00164386, 0.00173175, 0.00181171, 0.00188224, 0.00194199, 0.00198977, 0.00202462, 0.00204582, 0.00205293, 0.00204582, 0.00202462, 0.00198977, 0.00194199, 0.00188224, 0.00181171, 0.00173175, 0.00164386, 0.00154964, 0.0014507,  0.00134869, 0.00124517 },
    {0.00119851, 0.00129815, 0.00139634, 0.00149156, 0.00158226, 0.00166685, 0.00174381, 0.00181171, 0.00186922, 0.00191521, 0.00194875, 0.00196915, 0.001976,   0.00196915, 0.00194875, 0.00191521, 0.00186922, 0.00181171, 0.00174381, 0.00166685, 0.00158226, 0.00149156, 0.00139634, 0.00129815, 0.00119851 },
    {0.00114561, 0.00124085, 0.00133471, 0.00142573, 0.00151242, 0.00159328, 0.00166685, 0.00173175, 0.00178672, 0.00183068, 0.00186274, 0.00188224, 0.00188879, 0.00188224, 0.00186274, 0.00183068, 0.00178672, 0.00173175, 0.00166685, 0.00159328, 0.00151242, 0.00142573, 0.00133471, 0.00124085, 0.00114561 },
    {0.00108747, 0.00117788, 0.00126697, 0.00135338, 0.00143567, 0.00151242, 0.00158226, 0.00164386, 0.00169604, 0.00173777, 0.0017682,  0.00178672, 0.00179293, 0.00178672, 0.0017682,  0.00173777, 0.00169604, 0.00164386, 0.00158226, 0.00151242, 0.00143567, 0.00135338, 0.00126697, 0.00117788, 0.00108747 },
    {0.00102514, 0.00111036, 0.00119435, 0.0012758,  0.00135338, 0.00142573, 0.00149156, 0.00154964, 0.00159883, 0.00163816, 0.00166685, 0.0016843, 0.00169016, 0.0016843,  0.00166685, 0.00163816, 0.00159883, 0.00154964, 0.00149156, 0.00142573, 0.00135338, 0.0012758,  0.00119435, 0.00111036, 0.00102514 },
    {0.00095969, 0.00103947, 0.0011181,  0.00119435, 0.00126697, 0.00133471, 0.00139634, 0.0014507,  0.00149675, 0.00153358, 0.00156043, 0.00157677, 0.00158226, 0.00157677, 0.00156043, 0.00153358, 0.00149675, 0.0014507, 0.00139634, 0.00133471, 0.00126697, 0.00119435, 0.0011181,  0.00103947, 0.00095969 },
    {0.0008922,  0.00096638, 0.00103947, 0.00111036, 0.00117788, 0.00124085, 0.00129815, 0.00134869, 0.0013915,  0.00142573, 0.0014507,  0.00146589, 0.00147099, 0.00146589, 0.0014507,  0.00142573, 0.0013915,  0.00134869, 0.00129815, 0.00124085, 0.00117788, 0.00111036, 0.00103947, 0.00096638, 0.0008922 },
    {0.00082372, 0.0008922,  0.00095969, 0.00102514, 0.00108747, 0.00114561, 0.00119851, 0.00124517, 0.00128469, 0.0013163,  0.00133935, 0.00135338, 0.00135808, 0.00135338, 0.00133935, 0.0013163,  0.00128469, 0.00124517, 0.00119851, 0.00114561, 0.00108747, 0.00102514, 0.00095969, 0.0008922, 0.00082372 },
};



Region calcRegion(float2 uv, int xStart, int xEnd, int yStart, int yEnd)
{
    Region r;
    float3 sum = 0.0;
    float3 squareSum = 0.0;
    float totalWeight = 0.0;

    int samples = 0;

    float depth = readDepth(uv, sDepthFrame);
    depth = saturate(depth / 100000);

    float minRadius = max(1, radius * 0.5);
    float effectiveRadius = lerp(radius, minRadius, depth);

    [loop]
    for (int x = xStart; x <= xEnd; x++)
    {
        [loop]
        for (int y = yStart; y <= yEnd; y++)
        {
            float within_kernel = step(length(float2(x, y)), effectiveRadius);
            if (within_kernel == 1) {
                float2 offset = float2(rcpres.x * x, rcpres.y * y);
                float3 tex = tex2D(s0, uv + offset);

                float weight = kernel[x + KERNEL_RADIUS][y + KERNEL_RADIUS];
                sum += tex * weight;
                squareSum += tex * tex * weight;
                totalWeight += weight;
                samples++;
            }
        }
    }

    r.mean = sum / totalWeight;
    float3 variance = abs((squareSum / totalWeight) - (r.mean * r.mean));
    r.variance = length(variance);

    return r;
}


float4 paint(float2 tex : TEXCOORD0) : COLOR
{

    Region regionA = calcRegion(tex, -12, 0, -12, 0);
    Region regionB = calcRegion(tex, 0, 12, -12, 0);
    Region regionC = calcRegion(tex, -12, 0, 0, 12);
    Region regionD = calcRegion(tex, 0, 12, 0, 12);

    float3 col = regionA.mean;
    float minVar = regionA.variance;

    float testVal;

    testVal = step(regionB.variance, minVar);
    col = lerp(col, regionB.mean, testVal);
    minVar = lerp(minVar, regionB.variance, testVal);

    testVal = step(regionC.variance, minVar);
    col = lerp(col, regionC.mean, testVal);
    minVar = lerp(minVar, regionC.variance, testVal);

    testVal = step(regionD.variance, minVar);
    col = lerp(col, regionD.mean, testVal);




    return float4(col, 1.0);
}

technique T0 < string MGEinterface = "MGE XE 0"; string category = "final"; int priorityAdjust = 68;   >
{
    pass { PixelShader = compile ps_3_0 paint(); }
}
