
static const float kernelRad4[4*2+1][4*2+1] = {
    {0.0000, 0.0000, 0.0000, 0.0001, 0.0001, 0.0001, 0.00, 0.0000, 0.0000},
    {0.0000, 0.0000, 0.0004, 0.0014, 0.0023, 0.0014, 0.04, 0.0000, 0.0000},
    {0.0000, 0.0004, 0.0037, 0.0146, 0.0232, 0.0146, 0.37, 0.0004, 0.0000},
    {0.0001, 0.0014, 0.0146, 0.0584, 0.0926, 0.0584, 0.46, 0.0014, 0.0001},
    {0.0001, 0.0023, 0.0232, 0.0926, 0.1466, 0.0926, 0.32, 0.0023, 0.0001},
    {0.0001, 0.0014, 0.0146, 0.0584, 0.0926, 0.0584, 0.46, 0.0014, 0.0001},
    {0.0000, 0.0004, 0.0037, 0.0146, 0.0232, 0.0146, 0.37, 0.0004, 0.0000},
    {0.0000, 0.0000, 0.0004, 0.0014, 0.0023, 0.0014, 0.04, 0.0000, 0.0000},
    {0.0000, 0.0000, 0.0000, 0.0001, 0.0001, 0.0001, 0.00, 0.0000, 0.0000},
};

static const float kernelRad7[7*2+1][7*2+1] = {
    {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {0.0000, 0.0000, 0.0000, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0004, 0.0003, 0.0002, 0.0001, 0.0000, 0.0000, 0.0000},
    {0.0000, 0.0000, 0.0001, 0.0003, 0.0006, 0.0011, 0.0016, 0.0018, 0.0016, 0.0011, 0.0006, 0.0003, 0.0001, 0.0000, 0.0000},
    {0.0000, 0.0001, 0.0003, 0.0008, 0.0018, 0.0034, 0.0049, 0.0055, 0.0049, 0.0034, 0.0018, 0.0008, 0.0003, 0.0001, 0.0000},
    {0.0000, 0.0002, 0.0006, 0.0018, 0.0043, 0.0079, 0.0115, 0.0130, 0.0115, 0.0079, 0.0043, 0.0018, 0.0006, 0.0002, 0.0000},
    {0.0001, 0.0003, 0.0011, 0.0034, 0.0079, 0.0146, 0.0211, 0.0239, 0.0211, 0.0146, 0.0079, 0.0034, 0.0011, 0.0003, 0.0001},
    {0.0001, 0.0004, 0.0016, 0.0049, 0.0115, 0.0211, 0.0305, 0.0345, 0.0305, 0.0211, 0.0115, 0.0049, 0.0016, 0.0004, 0.0001},
    {0.0001, 0.0005, 0.0018, 0.0055, 0.0130, 0.0239, 0.0345, 0.0390, 0.0345, 0.0239, 0.0130, 0.0055, 0.0018, 0.0005, 0.0001},
    {0.0001, 0.0004, 0.0016, 0.0049, 0.0115, 0.0211, 0.0305, 0.0345, 0.0305, 0.0211, 0.0115, 0.0049, 0.0016, 0.0004, 0.0001},
    {0.0001, 0.0003, 0.0011, 0.0034, 0.0079, 0.0146, 0.0211, 0.0239, 0.0211, 0.0146, 0.0079, 0.0034, 0.0011, 0.0003, 0.0001},
    {0.0000, 0.0002, 0.0006, 0.0018, 0.0043, 0.0079, 0.0115, 0.0130, 0.0115, 0.0079, 0.0043, 0.0018, 0.0006, 0.0002, 0.0000},
    {0.0000, 0.0001, 0.0003, 0.0008, 0.0018, 0.0034, 0.0049, 0.0055, 0.0049, 0.0034, 0.0018, 0.0008, 0.0003, 0.0001, 0.0000},
    {0.0000, 0.0000, 0.0001, 0.0003, 0.0006, 0.0011, 0.0016, 0.0018, 0.0016, 0.0011, 0.0006, 0.0003, 0.0001, 0.0000, 0.0000},
    {0.0000, 0.0000, 0.0000, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0004, 0.0003, 0.0002, 0.0001, 0.0000, 0.0000, 0.0000},
    {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
};


static const float kernelRad10[11] ={
    0.1418,	0.1331,	0.1101,	0.0803,	0.0516,	0.0293,	0.0146,	0.0064,	0.0025,	0.0009,	0.0003,
};

/**
    Applies a horizontal Gaussian blur.
**/
float3 GaussianBlurH(float2 uv, sampler2D sTex, float radius, float2 texelSize) {
    float3 sum = tex2D(sTex, uv).rgb * kernelRad10[0];

    for (int i = 1; i <= 10; i++) {
        float2 offset = float2(i * texelSize.x * radius, 0);
        sum += tex2D(sTex, uv + offset).rgb * kernelRad10[i];
        sum += tex2D(sTex, uv - offset).rgb * kernelRad10[i];
    }
    return sum;
}

/**
    Applies a vertical Gaussian blur.
**/
float3 GaussianBlurV(float2 uv, sampler2D sTex, float radius, float2 texelSize) {
    float3 sum = tex2D(sTex, uv).rgb * kernelRad10[0];

    for (int i = 1; i <= 10; i++) {
        float2 offset = float2(0, i * texelSize.y * radius);
        sum += tex2D(sTex, uv + offset).rgb * kernelRad10[i];
        sum += tex2D(sTex, uv - offset).rgb * kernelRad10[i];
    }
    return sum;
}

